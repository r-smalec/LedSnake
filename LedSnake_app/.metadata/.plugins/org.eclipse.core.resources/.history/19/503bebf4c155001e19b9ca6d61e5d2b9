/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "sleep.h"

#include "xparameters.h"
#include "xil_printf.h"

#define AXI_ADDR XPAR_LED_FRAME_SENDER_0_S00_AXI_BASEADDR

uint32_t* led_config_reg;
uint32_t* led0_reg;
uint32_t* led1_reg;
uint32_t* led2_reg;
uint32_t* led3_reg;
uint32_t* led4_reg;
uint32_t* led5_reg;
uint32_t* led6_reg;
uint32_t* led7_reg;

typedef struct{
	uint8_t g;
	uint8_t r;
	uint8_t b;
} led;

led led0 = {100,0,0};
led led1 = {0,100,0};
led led2 = {0,0,100};
led led3 = {100,100,0};
led led4 = {0,100,100};
led led5 = {100,0,100};
led led6 = {100,100,100};
led led7 = {0,100,0};

void initAddr(void);
void writeToOutRegisters(void);
void ledPattern(uint8_t pattern_no);

int main()
{
    init_platform();

    print("Init\n");

    initAddr();
    writeToOutRegisters();
    xil_printf("Config: %d\n", *led_config_reg);

    print("Quit\n");

    cleanup_platform();
    return 0;
}

void initAddr() {

	led_config_reg = (void *)(AXI_ADDR);
	led0_reg = (void *)(AXI_ADDR + 4);
	led1_reg = (void *)(AXI_ADDR + 8);
	led2_reg = (void *)(AXI_ADDR + 12);
	led3_reg = (void *)(AXI_ADDR + 16);
	led4_reg = (void *)(AXI_ADDR + 20);
	led5_reg = (void *)(AXI_ADDR + 24);
	led6_reg = (void *)(AXI_ADDR + 28);
	led7_reg = (void *)(AXI_ADDR + 32);
}

void writeToOutRegisters() {

	*led0_reg = (uint32_t)((uint32_t)(led0.g << 16) | (uint32_t)(led0.r << 8) | (uint32_t)(led0.b));
	*led1_reg = (uint32_t)((uint32_t)(led1.g << 16) | (uint32_t)(led1.r << 8) | (uint32_t)(led1.b));
	*led2_reg = (uint32_t)((uint32_t)(led2.g << 16) | (uint32_t)(led2.r << 8) | (uint32_t)(led2.b));
	*led3_reg = (uint32_t)((uint32_t)(led3.g << 16) | (uint32_t)(led3.r << 8) | (uint32_t)(led3.b));
	*led4_reg = (uint32_t)((uint32_t)(led4.g << 16) | (uint32_t)(led4.r << 8) | (uint32_t)(led4.b));
	*led5_reg = (uint32_t)((uint32_t)(led5.g << 16) | (uint32_t)(led5.r << 8) | (uint32_t)(led5.b));
	*led6_reg = (uint32_t)((uint32_t)(led6.g << 16) | (uint32_t)(led6.r << 8) | (uint32_t)(led6.b));
	*led7_reg = (uint32_t)((uint32_t)(led7.g << 16) | (uint32_t)(led7.r << 8) | (uint32_t)(led7.b));
}

void ledPattern(uint8_t pattern_no){

	led0.g = 100; led0.r = 0; led0.b = 0;
	led1.g = 0; led1.r = 100; led1.b = 0;
	led2.g = 0; led2.r = 0; led2.b = 100;
	led3.g = 100; led3.r = 100; led3.b = 0;
	led4.g = 0; led4.r = 100; led4.b = 100;
	led5.g = 100; led5.r = 0; led5.b = 0;
	led6.g = 100; led6.r = 100; led6.b = 100;
	led7.g = 0; led7.r = 100; led7.b = 0;
}
